use cargo::core::compiler::{CompileMode, Executor, Unit};
use cargo::core::{PackageId, Target};
use cargo::util::CargoResult;
use cargo_util::ProcessBuilder;
use std::collections::HashSet;
use std::error::Error;
use std::ffi::OsString;
use std::fmt;
use std::io;
use std::path::PathBuf;
use std::sync::{Arc, Mutex};

/// A cargo Executor to intercept all build tasks and store all ".rs" file
/// paths for later scanning.
///
/// TODO: This is the place(?) to make rustc perform macro expansion to allow
/// scanning of the the expanded code. (incl. code generated by build.rs).
/// Seems to require nightly rust.
#[derive(Debug)]
pub struct CustomExecutor {
    /// Current work dir
    pub cwd: PathBuf,

    /// Needed since multiple rustc calls can be in flight at the same time.
    pub inner_ctx: Arc<Mutex<CustomExecutorInnerContext>>,
}

#[derive(Debug)]
enum CustomExecutorError {
    #[allow(dead_code)]
    InnerContextMutex(String),
    #[allow(dead_code)]
    Io(io::Error, PathBuf),
    #[allow(dead_code)]
    OutDirKeyMissing(String),
    #[allow(dead_code)]
    OutDirValueMissing(String),
}

impl Executor for CustomExecutor {
    /// In case of an `Err`, Cargo will not continue with the build process for
    /// this package.
    fn exec(
        &self,
        cmd: &ProcessBuilder,
        _id: PackageId,
        _target: &Target,
        _mode: CompileMode,
        _on_stdout_line: &mut dyn FnMut(&str) -> CargoResult<()>,
        _on_stderr_line: &mut dyn FnMut(&str) -> CargoResult<()>,
    ) -> CargoResult<()> {
        let mut args = cmd.get_args();
        let out_dir_key = OsString::from("--out-dir");

        args.position(|s| *s == out_dir_key).ok_or_else(|| {
            CustomExecutorError::OutDirKeyMissing(cmd.to_string())
        })?;

        let out_dir = args
            .next()
            .ok_or_else(|| {
                CustomExecutorError::OutDirValueMissing(cmd.to_string())
            })
            .map(PathBuf::from)?;

        // This can be different from the cwd used to launch the wrapping cargo
        // plugin. Discovered while fixing
        // https://github.com/rust-secure-code/cargo-geiger/issues/19
        let cwd = cmd
            .get_cwd()
            .map(PathBuf::from)
            .unwrap_or_else(|| self.cwd.to_owned());

        {
            // Scope to drop and release the mutex before calling rustc.
            let mut ctx = self.inner_ctx.lock().map_err(|e| {
                CustomExecutorError::InnerContextMutex(e.to_string())
            })?;
            for (arg_name, _) in args
                .map(|s| (s, s.to_string_lossy().to_lowercase()))
                .filter(|(_, arg_value)| arg_value.ends_with(".rs"))
            {
                let raw_path = cwd.join(arg_name);
                let path = raw_path
                    .canonicalize()
                    .map_err(|e| CustomExecutorError::Io(e, raw_path))?;
                ctx.rs_file_args.insert(path);
            }
            ctx.out_dir_args.insert(out_dir);
        }
        cmd.exec()?;
        Ok(())
    }

    /// Queried when queuing each unit of work. If it returns true, then the
    /// unit will always be rebuilt, independent of whether it needs to be.
    fn force_rebuild(&self, _unit: &Unit) -> bool {
        true // Overriding the default to force all units to be processed.
    }
}

/// Forward Display to Debug. See the crate root documentation.
impl fmt::Display for CustomExecutorError {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        fmt::Debug::fmt(self, f)
    }
}

impl Error for CustomExecutorError {}

#[derive(Debug, Default)]
pub struct CustomExecutorInnerContext {
    /// Stores all lib.rs, main.rs etc. passed to rustc during the build.
    pub rs_file_args: HashSet<PathBuf>,

    /// Investigate if this needs to be intercepted like this or if it can be
    /// looked up in a nicer way.
    pub out_dir_args: HashSet<PathBuf>,
}
